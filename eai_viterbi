import copy

# problem definition
states = ("R", "S")
trans = {"R": {"R": 0.65, "S": 0.35},
         "S": {"R": 0.25, "S": 0.75}}
emission = {"R": {"Y": 0.8, "N": 0.2},
            "S": {"Y": 0.2, "N": 0.8}}
initial = {"R": 0.5, "S": 0.5}
observed = ["Y", "N", "Y", "Y", "Y", "Y", "N"]

print("%40s: %s " % ("Observed sequence", str(observed)))

N = len(observed)

###########################
# We can find the most likely state sequence in a brute-force way by just
# trying all of them!

joint = {}
for s0 in states:
    for s1 in states:
        for s2 in states:
            for s3 in states:
                for s4 in states:
                    for s5 in states:
                        for s6 in states:
                            seq = str([s0, s1, s2, s3, s4, s5, s6])
                            joint[seq] = 0  # FILL THIS IN by computing P(S0...S6 | O0...O6)
                            # Hint: Since P(S0...S6 | O0...O6) = P(S0...S6,O0...O6) / P(O0...O6),
                            #   but P(O0...O6) is fixed by the problem and a positive number,
                            #   maximizing P(S0...S6,O0...O6) is the same as maximizing P(S0...S6 | O0...O6).
                            #   So just compute the joint probability P(S0...S6,O0...O6)  instead

print("%40s: %s" % ("Most likely sequence by brute force:", str(max(joint, key=joint.get))))

#############################
# obviously that's a big mess, and slow -- each every day requires another nested loop and 2x the computation time.
# so instead, compute using Viterbi!

# Viterbi table will have two rows and N columns 
V_table = {"R": [0] * N, "S": [0] * N}


# Here you'll have a loop to build up the viterbi table, left to right
def viterbi(observed, states, initial, trans, emission):
        pi_initial = [{}]
        for i in states:
            pi_initial[0][i] = {"prob": initial[i] * emission[i][observed[0]], "last": None}

        for t in range(1, len(observed)):
            pi_initial.append({})
            for i in states:
                max_transmission_prob = pi_initial[t - 1][states[0]]["prob"] * trans[states[0]][i]
                prev_state_selected = states[0]
                for prev_state in states[1:]:
                    tr_prob = pi_initial[t - 1][prev_state]["prob"] * trans[prev_state][i]
                    if tr_prob > max_transmission_prob:
                        max_transmission_prob = tr_prob
                        prev_state_selected = prev_state

                max_prob = max_transmission_prob * emission[i][observed[t]]
                pi_initial[t][i] = {"prob": max_prob, "last": prev_state_selected}
        opt = []
        max_prob = 0.0
        best_st = None

        for st, data in pi_initial[-1].items():
            if data["prob"] > max_prob:
                max_prob = data["prob"]
                best_st = st
        opt.append(best_st)
        previous = best_st

        for t in range(len(pi_initial) - 2, -1, -1):
            opt.insert(0, pi_initial[t + 1][previous]["last"])
            previous = pi_initial[t + 1][previous]["last"]

        return " ".join(opt) 


def dptable(V):
    yield " ".join(("%12d" % i) for i in range(len(V)))
    for state in V[0]:
        yield "%.7s: " % state + " ".join("%.7s" % ("%f" % v[state]["prob"]) for v in V)


# Here you'll have a loop that backtracks to find the most likely state sequence

viterbi_seq  = viterbi(observed, states, initial, trans, emission)


print("%40s: %s" % ("Most likely sequence by Viterbi:", str(viterbi_seq)))
